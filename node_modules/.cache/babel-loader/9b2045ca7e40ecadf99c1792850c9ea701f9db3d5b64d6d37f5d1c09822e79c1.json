{"ast":null,"code":"var _jsxFileName = \"/media/gabrela/ubunte/working-with-react/src/MemoryGame/Memory.js\",\n  _s = $RefreshSig$();\nimport './Memory.css';\nimport { useState, useEffect } from 'react';\nimport SingleCard from './SingleCard';\nimport { Link } from \"react-router-dom\";\nimport cutieImage from './img/cutie.jpg';\nimport cutie2Image from './img/cutie2.jpg';\nimport cutie3Image from './img/cutie3.jpg';\nimport frogImage from './img/frog.jpg';\nimport helloImage from './img/hello.jpg';\nimport quackImage from './img/quack.jpg';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst cardImages = [{\n  src: cutieImage,\n  matched: false\n}, {\n  src: cutie2Image,\n  matched: false\n}, {\n  src: cutie3Image,\n  matched: false\n}, {\n  src: frogImage,\n  matched: false\n}, {\n  src: helloImage,\n  matched: false\n}, {\n  src: quackImage,\n  matched: false\n}];\nfunction Memory() {\n  _s();\n  const [cards, setCards] = useState([]);\n  const [turns, setTurns] = useState(0);\n  const [choiceOne, setChoiceOne] = useState(null);\n  const [choiceTwo, setChoiceTwo] = useState(null);\n  const [disabled, setDisabled] = useState(false);\n\n  //shuffle the cards, duplicate each image for matching\n  const shuffleCards = () => {\n    const shuffledCards = [...cardImages, ...cardImages].sort(() => Math.random() - 0.5)\n    //add id property to track specific image\n    .map(card => ({\n      ...card,\n      id: Math.random()\n    }));\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  //handle a choice\n  const handleChoice = card => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards(prevCards => {\n          return prevCards.map(card => {\n            if (card.src === choiceOne.src) {\n              return {\n                ...card,\n                matched: true\n              };\n            } else {\n              return card;\n            }\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n  const resetTurn = () => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns(prevTurns => prevTurns + 1);\n    setDisabled(false);\n  };\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    class: \"return\",\n    children: [/*#__PURE__*/_jsxDEV(Link, {\n      to: \"/\",\n      className: \"btn-voltar\",\n      children: \"Voltar\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 8\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"card-grid\",\n        children: cards.map(card => /*#__PURE__*/_jsxDEV(SingleCard, {\n          card: card,\n          handleChoice: handleChoice,\n          flipped: card === choiceOne || card === choiceTwo || card.matched,\n          disabled: disabled\n        }, card.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 11\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Turns: \", turns]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        class: \"button-memory\",\n        onClick: shuffleCards,\n        children: \"New Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Memory Game\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 88,\n      columnNumber: 5\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }, this);\n}\n_s(Memory, \"zpj1OC3lPd52QG2dCYHCz30icbw=\");\n_c = Memory;\nexport default Memory;\nvar _c;\n$RefreshReg$(_c, \"Memory\");","map":{"version":3,"names":["useState","useEffect","SingleCard","Link","cutieImage","cutie2Image","cutie3Image","frogImage","helloImage","quackImage","jsxDEV","_jsxDEV","cardImages","src","matched","Memory","_s","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","disabled","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","card","id","handleChoice","prevCards","resetTurn","setTimeout","prevTurns","class","children","to","className","fileName","_jsxFileName","lineNumber","columnNumber","flipped","onClick","_c","$RefreshReg$"],"sources":["/media/gabrela/ubunte/working-with-react/src/MemoryGame/Memory.js"],"sourcesContent":["import './Memory.css'\r\nimport {useState, useEffect} from 'react'\r\nimport SingleCard from './SingleCard';\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport cutieImage from './img/cutie.jpg';\r\nimport cutie2Image from './img/cutie2.jpg';\r\nimport cutie3Image from './img/cutie3.jpg';\r\nimport frogImage from './img/frog.jpg';\r\nimport helloImage from './img/hello.jpg';\r\nimport quackImage from './img/quack.jpg';\r\n\r\nconst cardImages = [\r\n  { src: cutieImage, matched: false },\r\n  { src: cutie2Image, matched: false },\r\n  { src: cutie3Image, matched: false },\r\n  { src: frogImage, matched: false },\r\n  { src: helloImage, matched: false },\r\n  { src: quackImage, matched: false },\r\n];\r\n\r\nfunction Memory() {\r\n  const [cards, setCards] = useState([])\r\n  const [turns, setTurns] = useState(0)\r\n  const [choiceOne, setChoiceOne] = useState(null)\r\n  const [choiceTwo, setChoiceTwo] = useState(null)\r\n  const [disabled, setDisabled] = useState(false)\r\n\r\n  //shuffle the cards, duplicate each image for matching\r\n  const shuffleCards = () => {\r\n    const shuffledCards = [...cardImages, ...cardImages]\r\n      .sort(() => Math.random() - 0.5)\r\n      //add id property to track specific image\r\n      .map((card) => ({...card, id: Math.random()}))\r\n\r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)\r\n    setCards(shuffledCards)\r\n    setTurns(0)\r\n  }\r\n\r\n  //handle a choice\r\n  const handleChoice = (card) => {\r\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card)\r\n  }\r\n\r\n  useEffect(() => {\r\n    \r\n    if (choiceOne && choiceTwo) {\r\n      setDisabled(true)\r\n        if (choiceOne.src === choiceTwo.src) {\r\n          setCards(prevCards => {\r\n            return prevCards.map(card => {\r\n              if (card.src === choiceOne.src) {\r\n                return {...card, matched: true}\r\n                } else {\r\n                  return card\r\n            }\r\n          })\r\n        })\r\n        resetTurn()\r\n      } else {\r\n        \r\n        setTimeout(() => resetTurn(), 1000)\r\n      }\r\n    }\r\n  }, [choiceOne, choiceTwo])\r\n\r\n  \r\n  \r\n  const resetTurn = () => {\r\n    setChoiceOne(null)\r\n    setChoiceTwo(null)\r\n    setTurns(prevTurns => prevTurns + 1)\r\n    setDisabled(false)\r\n  }\r\n\r\n  useEffect(() => {\r\n    shuffleCards()\r\n  }, [])\r\n\r\n  return (\r\n    <div class=\"return\">\r\n       <Link to=\"/\" className=\"btn-voltar\">\r\n        Voltar\r\n      </Link>\r\n\r\n    <div className=\"container\">\r\n      <div className='card-grid'>\r\n        {cards.map(card =>(\r\n          <SingleCard\r\n           key={card.id}\r\n           card={card}\r\n           handleChoice={handleChoice}\r\n           flipped={card === choiceOne || card === choiceTwo || card.matched}\r\n           disabled={disabled}\r\n           />\r\n        ))}\r\n      </div>\r\n      <p>Turns: {turns}</p>\r\n      <button class=\"button-memory\" onClick={shuffleCards}>New Game</button>\r\n      <h1>Memory Game</h1>\r\n\r\n    </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Memory;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}